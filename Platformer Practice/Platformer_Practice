# Platformer Practice
# Python 3.9.6
# A program by Tyler Serio
# A program for testing out platformer game mechanics, menus, gameplay, etc.

# Import packages
import pygame
from pygame.locals import *
import random
import time

pygame.init() # Initializes pygame
pygame.mixer.init() # Initializes mixer module (for sounds)
vec = pygame.math.Vector2 # Variable, 2 for two dimensional

# Set constants
HEIGHT = 450 # Height of window
WIDTH = 400 # Width of window
ACC = 0.5 # Acceleration 
FRIC = -0.12 # Friction
FPS = 60 # Frames per second
FramePerSec = pygame.time.Clock() # Clock set up to later control frames per second

# Set Colors
PCOLOR = (128, 255, 40)
AQUA = (0, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
BROWN = (165, 42, 42)
GOLD = (255,215,0)
GREEN = (0, 255, 0)
ORANGE = (255, 128 ,0)
PURPLE = (128, 0, 128)
RED = (255, 0, 0)
SILVER = (192, 192, 192)
VIOLET = (238, 130, 238)
WHITE = (255, 255, 255)
YELLOW = (255, 255, 0)

# Define sound lists
BOOSTSOUNDS = ("sounds/vine-boom-162668.mp3", "sounds/ohoh-yeh-91690.mp3", "sounds/heavy-cineamtic-hit-166888.mp3", "sounds/shouting-yeah-7043.mp3", "sounds/hq-explosion-6288.mp3", "sounds/man-scream-121085.mp3")
REVIVESOUNDS = ("bam-bam-bolam-82704.mp3", "koto-hit-106066.mp3", "oh-yeah-85721.mp3", "woo-hoo-82843.mp3")
GAMEOVERSOUNDS = ("sounds/oh-gah-82730.mp3", "sounds/no-and-grunts-82716.mp3", "sounds/homemadeoof-47509.mp3", "sounds/aww-8277.mp3", "sounds/angel-ahhh-102549.mp3", "sounds/dishes-fall-and-crash-117075.mp3", "sounds/falling-143024.mp3", "sounds/falling-down-stairs-88067.mp3", "sounds/falling-down-stairs-v1-mixed-36001.mp3", "sounds/girl-oh-no-150550.mp3", "sounds/no-luck-too-bad-disappointing-sound-effect-112943.mp3", "sounds/splash-4-46870.mp3", "sounds/splash-6213.mp3", "sounds/whygod-36270.mp3", "sounds/falling-143024.mp3", "sounds/thud-82914.mp3", "sounds/monkey-128368.mp3", "sounds/thump-105302.mp3", "sounds/dishes-fall-and-crash-117075.mp3", "sounds/punch-6-166699.mp3")

# Set important global variables
global soundvolume, musicvolume
soundvolume = 30
musicvolume = 30

# Create display surface
displaysurface = pygame.display.set_mode((WIDTH, HEIGHT)) # Display surface
pygame.display.set_caption("Game") # Window caption

# Define the Merchant class
class Merchant(pygame.sprite.Sprite):
    def __init__(self, pos):
        super().__init__()
        self.objectype = "merchant"
        self.surf = pygame.Surface((30, 30))
        colornum = random.randint(1, 3)
        if colornum == 1:
            self.color = AQUA
        elif colornum == 2:
            self.color = SILVER
        elif colornum == 3:
            self.color = VIOLET
        self.surf.fill(self.color)
        self.rect = self.surf.get_rect()
        self.rect.topleft = pos
        # add random inventory (sells life yes or no, etc.)
        #self.inventory = []
        self.invlives = random.randint(0, 4)
        print(self.invlives)
        self.cost = random.randint(300, 1000)
        print(self.cost)

    def update(self):
        pass
            
# Define the player class
class Player(pygame.sprite.Sprite):
    def __init__(self, surfacexy, positionlefttop, color): # Self represents the object of the class itself
        super().__init__() # Super gives access to parent class methods/properties
        self.surf = pygame.Surface((surfacexy)) # Defines a surface
        self.color = color # Records the initial color of the Player object
        self.surf.fill(color) # Fills surface with a color
        self.rect = self.surf.get_rect() # Defines starting position of object
        self.jumping = False
        self.score = 0
        self.objectype = "player"
        self.jumpsound = pygame.mixer.Sound("sounds/cartoon-jump-6462.mp3")
        # For powerup/debuff variables like this, it might be easier to use a numeric value that changes for a single variable
        # rather than defining and using multiple variables
        self.life = 0
        self.feather = False # Feather powerup related
        self.feathertime = 0 # Feather powerup related
        self.hardfall = False
        self.hardfalltime = 0

        self.interacting = False

        # Define the position, velocity, acceleration
        self.pos = vec(positionlefttop) # Define starting position
        self.vel = vec(0, 0) # First number is x acceleration/velocity, second is y
        self.acc = vec(0, 0) # First number is x acceleration/velocity, second is y

    # Define the move function that takes into account acceleration, velocity, friction on the x-axis
    def move(self):
        if self.feather == True:
            self.acc = vec(0, 0.1)
            if self.feathertime < 0:
                self.feathertime = 0
                self.feather = False
        elif self.hardfall == True:
            self.acc = vec(0, 1)
            if self.hardfalltime < 0:
                self.hardfalltime = 0
                self.hardfall = False
        else:
            self.acc = vec(0, 0.5)

        pressed_keys = pygame.key.get_pressed() # Get which keys are pressed

        if pressed_keys[K_LEFT]: # If the left key is pressed
            self.acc.x = -ACC
        if pressed_keys[K_RIGHT]: # If the right key is pressed
            self.acc.x = ACC

        self.acc.x += self.vel.x * FRIC # Acceleration is velocity and friction
        self.vel += self.acc # Adding velocity from acceleration
        self.pos += self.vel + 0.5 * self.acc # Moving position using velocity/acceleration

        if self.pos.x > WIDTH: # If position of player is outside screen on right
            self.pos.x = 0 # Move player to left side of screen
        if self.pos.x < 0: # If position of player is outside screen on left
            self.pos.x = WIDTH # Move player to right side of screen

        self.rect.midbottom = self.pos

    # Define the jump method
    def jump(self):
        hits = pygame.sprite.spritecollide(self, platforms, False)
        if hits and not self.jumping:
            self.jumping = True
            if self.feather == True: # Feather powerup related
                self.vel.y = -8
                self.feathertime -= 1 # Feather powerup related
                if self.feathertime < 0:
                    self.feathertime = 0
                    self.feather = False
                    self.vel.y = -15
            elif self.hardfall == True:
                self.vel.y = -12
                self.hardfalltime -= 1 # Feather powerup related
                if self.hardfalltime < 0:
                    self.hardfalltime = 0
                    self.hardfall = False
                    self.vel.y = -15            
            else:
                self.vel.y = -15
            jumpsound = self.jumpsound
            pygame.mixer.Sound.play(jumpsound).set_volume(0.25)

    def cancel_jump(self):
        if self.jumping:
            if self.vel.y < -3 and self.vel.y > -30:
                self.vel.y = -3
            # Change how this works when Boost powerup is active

    def interact(self):
        self.interacting == True
        item = pygame.sprite.spritecollide(self, items, False)
        for thing in item:
            if thing.objectype == "savepoint":
                save()

        npc = pygame.sprite.spritecollide(self, npcs, False)
        for guy in npcs:
            if guy.objectype == "merchant":
                print("merchant")
                print(guy.cost)


    def stopinteract(self):
        self.interacting == False

    # Define the update method that checks for collisions with platforms
    def update(self):
        hits = pygame.sprite.spritecollide(self, platforms, False) # Define a variable using the spritecollide function. Checks if sprite of first parameters has collided with sprite/sprites of second parameter. Final parameter is "do you want this (player) sprite deleted? Usually False
        if self.vel.y > 0: # This makes sure velocity is not zero unless there is already some initial velocity
            if hits:
                if self.pos.y < hits[0].rect.bottom:
                    if hits[0].point == True:
                        hits[0].point = False
                        self.score += 1
                    self.pos.y = hits[0].rect.top + 1
                    self.vel.y = 0
                    self.jumping = False

def save():
    print("saved, eventually")
    try:
        file = open("savefile.txt", "w")
        
    except:
        file = open("savefile.txt", "x")
        
    for item in all_sprites:
        print(item.__dict__.keys())
        li = item.__dict__.keys()
        strang = ""
        strang2 = ""
        for key in li:
            strang = strang + str(key) + "###"
            strang2 = strang2 + str(item.__dict__[key]) + "###"
        strang = strang.strip("###")
        strang2 = strang2.strip("###")
        file.write(strang + "\n")
        file.write(strang2 + "\n")
        
    for item in items:
        li = item.__dict__.keys()
        strang = ""
        strang2 = ""
        for key in li:
            strang = strang + str(key) + "###"
            strang2 = strang2 + str(item.__dict__[key]) + "###"
        strang = strang.strip("###")
        strang2 = strang2.strip("###")
        file.write(strang + "\n")
        file.write(strang2 + "\n")
        
    file.close()

###
# Remember that this function is incomplete
###
def load():
    # remember to add error handling for a file that doesn't exist
    # load speed and basically all variables
    file = open("savefile.txt", "r")
    displaysurface.fill((0, 0, 0))
    
    global platforms, items, all_sprites
    platforms = pygame.sprite.Group()
    items = pygame.sprite.Group()
    all_sprites = pygame.sprite.Group()
    
    lcount = 0
    for line in file:
        lcount += 1
        if lcount == 1:
            line = line.strip("\n")
            l1 = line.split("###")
            print(l1)
            place = l1.index("objectype")
        else:
            line = line.strip("\n")
            l2 = line.split("###")
            objectype = l2[place]
            lcount = 0
            if objectype == "player":
                rectplace = l1.index("rect")
                rect = l2[rectplace]
                rect = rect.replace(")>", "")
                rect = rect.replace("<rect(", "")
                rect = rect.split(",")
                left = int(rect[0])
                top = int(rect[1])
                width = int(rect[2])
                height = int(rect[3])
                global P1
                colortuple = l2[l1.index("color")].strip("()")
                colortuple = colortuple.split(",")
                r = int(colortuple[0])
                g = int(colortuple[1])
                b = int(colortuple[2])
                P1 = Player((width, height), (left, top), (r, g, b))
                P1.score = int(l2[l1.index("score")])
                #P1.rect = (left, top, width, height)
                #P1.surf = pygame.Surface((width, height))
                P1.rect = P1.surf.get_rect(center = ((left, top)))
                P1.pos = vec((left, top))
                all_sprites.add(P1)
            elif objectype == "platform":
                rectplace = l1.index("rect")
                rect = l2[rectplace]
                rect = rect.replace(")>", "")
                rect = rect.replace("<rect(", "")
                rect = rect.split(",")
                left = int(rect[0])
                top = int(rect[1])
                width = int(rect[2])
                height = int(rect[3])
                p = platform()
                p.surf = pygame.Surface((width, height))
                p.surf.fill((0, 255, 0))
                p.rect = p.surf.get_rect(center = ((left + (width / 2), top + (height / 2))))
                print(l2[l1.index("speed")])
                p.speed = int(l2[l1.index("speed")])
                p.moving = eval(str(l2[l1.index("moving")]))
                p.point = eval(str(l2[l1.index("point")]))
                platforms.add(p)
                all_sprites.add(p)
            elif objectype == "savepoint":
                rectplace = l1.index("rect")
                rect = l2[rectplace]
                rect = rect.replace(")>", "")
                rect = rect.replace("<rect(", "")
                rect = rect.split(",")
                left = rect[0]
                top = rect[1]
                width = rect[2]
                height = rect[3]
                s = Savepoint((int(left), int(top)))
                items.add(s)
            elif objectype == "powerup":
                rectplace = l1.index("rect")
                rect = l2[rectplace]
                rect = rect.replace(")>", "")
                rect = rect.replace("<rect(", "")
                rect = rect.split(",")
                left = int(rect[0])
                top = int(rect[1])
                width = int(rect[2])
                height = int(rect[3])
##                p = platform()
##                p.surf = pygame.Surface((width, height))
##                p.surf.fill((0, 255, 0))
##                p.rect = (left, top, width, height)
##                platforms.add(p)
##                all_sprites.add(p)
            elif objectype == "coin":
                print("derp")
            print(objectype)
        for x in items:
            displaysurface.blit(x.surf, x.rect)
        for x in all_sprites:
            displaysurface.blit(x.surf, x.rect)            
        pygame.display.update()
            
# Define the platform class
class platform(pygame.sprite.Sprite):
    def __init__(self): # Self represents the object of the class itself
        super().__init__() # Super gives access to parent class methods/properties
        self.surf = pygame.Surface((random.randint(50, 100), 12)) # Defines a surface
        self.surf.fill((0, 255, 0)) # Fills surface with a color
        #self.rect = self.surf.get_rect(center = (WIDTH/2, HEIGHT - 10)) # Defines starting position of object
        self.rect = self.surf.get_rect(center = (random.randint(0, WIDTH - 50), random.randint(0, HEIGHT - 30))) # Randomly assign width of platform
        self.speed = random.randint(-1, 1)
        self.objectype = "platform"
        
        self.moving = True
        self.point = True

    def move(self):
        hits = self.rect.colliderect(P1.rect)
        if self.moving == True:
            self.rect.move_ip(self.speed, 0)
            if hits:
                P1.pos += (self.speed, 0)
            if self.speed > 0 and self.rect.left > WIDTH:
                self.rect.right = 0
            if self.speed < 0 and self.rect.right < 0:
                self.rect.left = WIDTH

    def generateItem(self):
        if (self.speed == 0):
            chance = random.randint(1, 5)
            if chance == 5:
                secchance = random.randint(1, 5)
                if secchance == 5:
                    items.add(Savepoint((self.rect.centerx, self.rect.centery - 50)))
                elif secchance == 4:
                    npcs.add(Merchant((self.rect.centerx - 15, self.rect.centery - 34)))
                else:
                    items.add(Powerup((self.rect.centerx, self.rect.centery - 50)))
            else:
                items.add(Coin((self.rect.centerx, self.rect.centery - 50)))

# Define the coin class
class Coin(pygame.sprite.Sprite):
    def __init__(self, pos):
        super().__init__()
        self.surf = pygame.Surface((20, 20)) # Defines a surface
        self.color = GOLD
        self.surf.fill(self.color) # Fills surface with a color
        self.rect = self.surf.get_rect() # Defines starting position of object
        self.rect.topleft = pos
        self.objectype = "coin"

    def update(self):
        if self.rect.colliderect(P1.rect):
            P1.score += 5
            self.kill()
            
# Define the savepoint class
class Savepoint(pygame.sprite.Sprite):
    def __init__(self, pos):
        super().__init__()
        self.surf = pygame.Surface((20, 40)) # Defines a surface
        self.rect = self.surf.get_rect() # Defines starting position of object
        self.rect.topleft = pos
        self.surf.fill((255, 255, 255))
        self.objectype = "savepoint"
        #self.name = "savepoint"
        
    def update(self):
        pass
            
# Define the powerup class
class Powerup(pygame.sprite.Sprite):
    def __init__(self, pos):
        super().__init__()
        self.surf = pygame.Surface((20, 20)) # Defines a surface
        self.rect = self.surf.get_rect() # Defines starting position of object
        self.rect.topleft = pos
        self.objectype = "powerup"

        types = ["boost", "feather", "hardfall", "life"]
        self.var = types[random.randint(0, len(types) - 1)]
        print(self.var)
        if self.var == "boost":
            self.color = (200, 200, 200)
            self.surf.fill(self.color) # Fills surface with a color
            self.jumpsound = pygame.mixer.Sound(BOOSTSOUNDS[random.randint(0, len(BOOSTSOUNDS)-1)])
        if self.var == "feather":
            self.color = (100, 150, 220)
        if self.var == "hardfall":
            self.color = (220, 150, 100)
        if self.var == "life":
            self.color = PCOLOR
            
        self.surf.fill(self.color) # Fills surface with a color

    def update(self):
        if self.rect.colliderect(P1.rect):
            P1.score += 5
            self.kill()
            if self.var == "boost":
                P1.vel.y = -35
                P1.jumping = True
                pygame.mixer.Sound.play(self.jumpsound)
            if self.var == "feather":
                P1.feather = True
                P1.feathertime = 5
                P1.hardfall = False
                P1.hardfalltime = -1
            if self.var == "hardfall":
                P1.hardfall = True
                P1.hardfalltime = 5
                P1.feather = False
                P1.feathertime = -1
            if self.var == "life":
                P1.life += 1

# Define button class
class button(pygame.sprite.Sprite):
    def __init__(self, msg, x, y, posx, posy, action): # Self represents the object of the class itself
        super().__init__() # Super gives access to parent class methods/properties
        self.msg = msg
        self.surf = pygame.Surface((x, y)) # Defines a surface
        self.surf.fill((12, 12, 255)) # Fills surface with a color
        self.rect = self.surf.get_rect(center = (x/2, y/2))
        self.rect.topleft = (posx, posy)
        self.font = pygame.font.SysFont("Verdana", 20)
        self.action = action
        g = self.font.render(str(self.msg), True, (100, 100, 100))
        displaysurface.blit(self.surf, self.rect)
        displaysurface.blit(g, (posx + (x/4), posy + (y/4)))

# Define the function to check if a platform collides with a platform
def check(platform, groupies):
    if pygame.sprite.spritecollideany(platform, groupies):
        return True
    else:
        for entity in groupies:
            if entity == platform:
                continue
            if (abs(platform.rect.top - entity.rect.bottom) < 15) and (abs(platform.rect.bottom - entity.rect.top) < 15):
                return True
        C = False
        return C
                
# Define function to generate platforms
def plat_gen():
    while len(platforms) < 7:
        width = random.randrange(50, 100)
        p = platform()
        C = True
        while C:
            p = platform()
            p.rect.center = (random.randrange(0, WIDTH - width), random.randrange(-15, 0))
            C = check(p, platforms)
        p.generateItem()
        platforms.add(p)
        all_sprites.add(p)

# Define the game over menu
def game_over_menu():
    gameoversound = pygame.mixer.Sound(GAMEOVERSOUNDS[random.randint(0, len(GAMEOVERSOUNDS)-1)])
    pygame.mixer.Sound.play(gameoversound)
    continuebttn = button("Continue", 200, 50, 100, 100, "continue")
    mainmenubttn = button("Main Menu", 200, 50, 100, 200, "mainmenu")
    quitbttn = button("Quit", 200, 50, 100, 300, "quit")
    bttns = pygame.sprite.Group()
    bttns.add(continuebttn)
    bttns.add(mainmenubttn)
    bttns.add(quitbttn)
    death = 1
    while death == 1:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.mixer.quit()
                exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                for x in bttns:
                    if x.rect.collidepoint(event.pos):
                        if x.action == "quit":
                            pygame.mixer.quit()
                            pygame.quit()
                            exit()
                        if x.action == "continue":
                            print("continue")
                            death = 0
                        if x.action == "mainmenu":
                            print("mainmenu")
                            global part
                            part = 1
                            death = 0
        bttns.update()
        pygame.display.update()
        FramePerSec.tick(FPS)
    for x in bttns:
        x.kill()
    displaysurface.fill((0, 0, 0))
    pygame.display.update()

# Define the main menu
def main_menu():
    displaysurface.fill((0, 0, 0))
    topsurf = pygame.Surface((WIDTH, 10))
    topsurf.fill((12, 12, 255))
    sidesurf = pygame.Surface((10, HEIGHT))
    sidesurf.fill((12, 12, 255))
    music = pygame.mixer.Sound("sounds/cottagecore-17463.mp3")
    musicchannel = pygame.mixer.Channel(0)
    musicchannel.play(music, loops = -1)
    newbttn = button("New Game", 200, 50, 100, 50, "newgame")
    continuebttn = button("Continue", 200, 50, 100, 150, "continue")
    optionsbttn = button("Options", 200, 50, 100, 250, "options")
    quitbttn = button("Quit", 200, 50, 100, 350, "quit")
    bttns = pygame.sprite.Group()
    bttns.add(newbttn)
    bttns.add(continuebttn)
    bttns.add(optionsbttn)
    bttns.add(quitbttn)
    mainmenu = 1
    global part
    while mainmenu == 1:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                for x in bttns:
                    if x.rect.collidepoint(event.pos):
                        if x.action == "quit":
                            print("quit")
                            pygame.mixer.quit()
                            pygame.quit()
                            exit()
                        if x.action == "newgame":
                            print("newgame")
                            part = 2
                            mainmenu = 0
                            displaysurface.fill((0, 0, 0)) # from here
                            start_new()
                            generate()
                        if x.action == "continue":
                            print("continue")
                            part = 2
                            mainmenu = 0
                            displaysurface.fill((0, 0, 0)) # from here
                            load()
                        if x.action == "options":
                            print("options")
                            options_menu()
                            newbttn = button("New Game", 200, 50, 100, 50, "newgame")
                            continuebttn = button("Continue", 200, 50, 100, 150, "continue")
                            optionsbttn = button("Options", 200, 50, 100, 250, "options")
                            quitbttn = button("Quit", 200, 50, 100, 350, "quit")
        bttns.update()
        displaysurface.blit(topsurf, (0, 0))
        displaysurface.blit(topsurf, (0, (HEIGHT - 10)))
        displaysurface.blit(sidesurf, (0, 0))
        displaysurface.blit(sidesurf, ((WIDTH - 10), 0))
        pygame.display.update()
        FramePerSec.tick(FPS)
    for x in bttns:
        x.kill()
    pygame.display.update()
    musicchannel.stop() # to here, move to "new game" button selection

def options_menu():
    displaysurface.fill((0, 0, 0))
    topsurf = pygame.Surface((WIDTH, 10))
    topsurf.fill((12, 12, 255))
    sidesurf = pygame.Surface((10, HEIGHT))
    sidesurf.fill((12, 12, 255))
    soundbttn = button("Sound", 200, 50, 100, 50, "sound")
    graphicsbttn = button("Graphics", 200, 50, 100, 150, "graphics")
    controlsbttn = button("Controls", 200, 50, 100, 250, "controls")
    backbttn = button("Back", 200, 50, 100, 350, "back")
    bttns = pygame.sprite.Group()
    bttns.add(soundbttn)
    bttns.add(graphicsbttn)
    bttns.add(controlsbttn)
    bttns.add(backbttn)
    optionsmenu = 1
    while optionsmenu == 1:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                for x in bttns:
                    if x.rect.collidepoint(event.pos):
                        if x.action == "back":
                            optionsmenu = 0
                    if x.rect.collidepoint(event.pos):
                        if x.action == "sound":
                            sound_menu()
                            print("sound")
                    if x.rect.collidepoint(event.pos):
                        if x.action == "graphics":
                            graphics_menu()
                            print("graphics")
                    if x.rect.collidepoint(event.pos):
                        if x.action == "controls":
                            controls_menu()
                            print("controls")
                    
            soundbttn = button("Sound", 200, 50, 100, 50, "sound")
            graphicsbttn = button("Graphics", 200, 50, 100, 150, "graphics")
            controlsbttn = button("Controls", 200, 50, 100, 250, "controls")
            backbttn = button("Back", 200, 50, 100, 350, "back")
        bttns.update()
        displaysurface.blit(topsurf, (0, 0))
        displaysurface.blit(topsurf, (0, (HEIGHT - 10)))
        displaysurface.blit(sidesurf, (0, 0))
        displaysurface.blit(sidesurf, ((WIDTH - 10), 0))
        pygame.display.update()
        FramePerSec.tick(FPS)
    for x in bttns:
        x.kill()
    #displaysurface.fill((0, 0, 0))
    pygame.display.update()

def sound_menu():
    print("soundmenu")
    displaysurface.fill((0, 0, 0))
    topsurf = pygame.Surface((WIDTH, 10))
    topsurf.fill((12, 12, 255))
    sidesurf = pygame.Surface((10, HEIGHT))
    sidesurf.fill((12, 12, 255))
    backbttn = button("Back", 200, 50, 100, 350, "back")
    bttns = pygame.sprite.Group()
    bttns.add(backbttn)
    soundmenu = 1
    while soundmenu == 1:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                for x in bttns:
                    if x.rect.collidepoint(event.pos):
                        if x.action == "back":
                            soundmenu = 0
        displaysurface.blit(topsurf, (0, 0))
        displaysurface.blit(topsurf, (0, (HEIGHT - 10)))
        displaysurface.blit(sidesurf, (0, 0))
        displaysurface.blit(sidesurf, ((WIDTH - 10), 0))
        pygame.display.update()
        FramePerSec.tick(FPS)
    # master sound, draw a line and a label
    # music, draw a line and a label
    # effects, draw a line and a label
    # make sure to have slider buttons for all of these
    pygame.display.update()

def graphics_menu():
    print("graphicsmenu")
    displaysurface.fill((0, 0, 0))
    topsurf = pygame.Surface((WIDTH, 10))
    topsurf.fill((12, 12, 255))
    sidesurf = pygame.Surface((10, HEIGHT))
    sidesurf.fill((12, 12, 255))
    backbttn = button("Back", 200, 50, 100, 350, "back")
    bttns = pygame.sprite.Group()
    bttns.add(backbttn)
    graphicsmenu = 1
    while graphicsmenu == 1:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                for x in bttns:
                    if x.rect.collidepoint(event.pos):
                        if x.action == "back":
                            graphicsmenu = 0
        displaysurface.blit(topsurf, (0, 0))
        displaysurface.blit(topsurf, (0, (HEIGHT - 10)))
        displaysurface.blit(sidesurf, (0, 0))
        displaysurface.blit(sidesurf, ((WIDTH - 10), 0))
        pygame.display.update()
        FramePerSec.tick(FPS)
    # resolution
    # brightness
    # blue light blocker (night light)
    pygame.display.update()

def controls_menu():
    print("controlsmenu")
    displaysurface.fill((0, 0, 0))
    topsurf = pygame.Surface((WIDTH, 10))
    topsurf.fill((12, 12, 255))
    sidesurf = pygame.Surface((10, HEIGHT))
    sidesurf.fill((12, 12, 255))
    backbttn = button("Back", 200, 50, 100, 350, "back")
    bttns = pygame.sprite.Group()
    bttns.add(backbttn)
    controlsmenu = 1
    while controlsmenu == 1:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                for x in bttns:
                    if x.rect.collidepoint(event.pos):
                        if x.action == "back":
                            controlsmenu = 0
        displaysurface.blit(topsurf, (0, 0))
        displaysurface.blit(topsurf, (0, (HEIGHT - 10)))
        displaysurface.blit(sidesurf, (0, 0))
        displaysurface.blit(sidesurf, ((WIDTH - 10), 0))
        pygame.display.update()
        FramePerSec.tick(FPS)
    # key bindings
    pygame.display.update()

def game_menu():
    continuebttn = button("Continue", 200, 50, 100, 50, "continue")
    optionsbttn = button("Options", 200, 50, 100, 150, "options")
    mainmenubttn = button("Main Menu", 200, 50, 100, 250, "mainmenu")
    quitbttn = button("Quit", 200, 50, 100, 350, "quit")
    bttns = pygame.sprite.Group()
    bttns.add(continuebttn)
    bttns.add(optionsbttn)
    bttns.add(mainmenubttn)
    bttns.add(quitbttn)
    gamemenu = 1
    while gamemenu == 1:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.mixer.quit()
                pygame.quit()
                exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    gamemenu = 0
            if event.type == pygame.MOUSEBUTTONDOWN:
                for x in bttns:
                    if x.rect.collidepoint(event.pos):
                        if x.action == "quit":
                            print("quit")
                            pygame.mixer.quit()
                            pygame.quit()
                            exit()
                        elif x.action == "mainmenu":
                            print("mainmenu")
                            global part
                            part = 1
                            gamemenu = 0
                        elif x.action == "options":
                            print("options")
                        elif x.action == "continue":
                            print("continue")
                            gamemenu = 0
        
        bttns.update()
        pygame.display.update()
        FramePerSec.tick(FPS)
        
    for x in bttns:
        x.kill()
    displaysurface.fill((0, 0, 0))
    pygame.display.update()  

def start_new():
    global platforms, items, all_sprites, npcs
    platforms = pygame.sprite.Group()
    items = pygame.sprite.Group()
    all_sprites = pygame.sprite.Group()
    npcs = pygame.sprite.Group()
    print(len(all_sprites))

    global P1, PT1, PPrime
    PT1 = platform() # Create a platform object
    PPrime = platform()
    global P1
    P1 = Player((30, 30), (10, 400), PCOLOR) # Create a player object
    P1.life = 1
    PT1.surf = pygame.Surface((WIDTH, 20))
    PT1.surf.fill((255, 0, 0))
    PT1.rect = PT1.surf.get_rect(center = (WIDTH/2, HEIGHT - 10))
    PT1.moving = False
    PPrime.surf = pygame.Surface((75, 12))
    PPrime.surf.fill((255, 0, 0))
    PPrime.rect = PPrime.surf.get_rect(center = (75, 300))
    PPrime.moving = False
    PT1.point = False
    all_sprites.add(PT1) # Add platform to sprite group
    all_sprites.add(P1) # Add the player to the sprite group
    platforms.add(PT1) # Add platform to group
    all_sprites.add(PPrime)
    platforms.add(PPrime)

# Add randomized level generation
# This loop runs randomly between 4 and 8 times
# It generates platforms and adds them to the sprites/platforms group
def generate():
    for x in range(random.randint(4, 8)):
        C = True
        pl = platform()
        while C:
            pl = platform()
            C = check(pl, platforms)
        pl.generateItem()
        platforms.add(pl)
        all_sprites.add(pl)

# Game Loop
def game_loop():
    global part
    part = 1
    while True:
        if part == 1:
            main_menu()

        while part == 2:
            for event in pygame.event.get():
                if event.type == QUIT:
                    pygame.mixer.quit()
                    pygame.quit()
                    exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        game_menu()
                    if event.key == pygame.K_SPACE:
                        P1.jump()
                    if event.key == pygame.K_e:
                        P1.interact()
                if event.type == pygame.KEYUP:
                    if event.key == pygame.K_SPACE:
                        P1.cancel_jump()
                    if event.key == pygame.K_e:
                        P1.stopinteract()
            
            # Start a game over screen if the player falls below the screen
            if P1.rect.top > HEIGHT + 50 and P1.life <= 0:
                print(P1.rect.top)
                time.sleep(1)
                for entity in items:
                    entity.kill()
                for entity in platforms:
                    entity.kill()
                displaysurface.fill((255, 0, 0))
                pygame.display.update()
                game_over_menu()
                if part == 1:
                    break
                else:
                    start_new()
                    generate()
                    PT11 = platform() # Create a platform object
                    PT11.surf = pygame.Surface((WIDTH, 20))
                    PT11.surf.fill((255, 0, 0))
                    PT11.rect = PT11.surf.get_rect(center = (WIDTH/2, HEIGHT - 10))

                    PT11.moving = False
                    PT11.point = False
                    all_sprites.add(PT11)
                    platforms.add(PT11)
                    P1.pos = vec((10, 400))
                    P1.vel = vec(0, 0) # First number is x acceleration/velocity, second is y
                    P1.acc = vec(0, 0)
            elif P1.rect.top > HEIGHT and P1.life > 0:
                P1.vel.y -= 50
                P1.life -= 1
                revivesound = pygame.mixer.Sound("sounds/revive/" + REVIVESOUNDS[random.randint(0, len(REVIVESOUNDS)-1)])
                pygame.mixer.Sound.play(revivesound)

            if P1.rect.top <= HEIGHT / 3: # Moves screen up when player is a third of the way up
                P1.pos.y += abs(P1.vel.y) 
                for plat in platforms: # Update the position of all platforms
                    plat.rect.y += abs(P1.vel.y)# Add Player's velocity for all platforms
                    if plat.rect.top >= HEIGHT:
                        plat.kill() # Destroy platforms below the screen
                for item in items:
                    item.rect.y += abs(P1.vel.y)
                    if item.rect.top >= HEIGHT:
                        item.kill()
                for npc in npcs:
                    npc.rect.y += abs(P1.vel.y)
                    if npc.rect.top >= HEIGHT:
                        npc.kill()

            plat_gen() # Generate platforms when there are fewer on the screen

            displaysurface.fill((0, 0, 0)) # Fill the screen with the color black

            f = pygame.font.SysFont("Verdana", 20) # Font for the score at the top of the screen
            g = f.render(str(P1.score), True, (123, 255, 0)) # Render score at top of screen
            displaysurface.blit(g, (WIDTH/2, 10)) # Blit score to display surface
            if P1.feathertime > 0:
                fg = f.render(str(P1.feathertime), True, (100, 150, 220)) # Render feather uses at top of screen
                displaysurface.blit(fg, (WIDTH/2 + 50, 10)) # Blit score to display surface
            if P1.hardfalltime > 0:
                fg = f.render(str(P1.hardfalltime), True, (220, 150, 100)) # Render feather uses at top of screen
                displaysurface.blit(fg, (WIDTH/2 + 50, 10)) # Blit score to display surface
            
            for entity in platforms: # For every platform in the group of platforms
                 entity.move() # Move the platform

            P1.move() # Call player movement method every loop
            P1.update() # Call player update method every loop
            lifetext = f.render(str(P1.life), True, PCOLOR)
            #print(P1.surf.get_rect()[2])
            displaysurface.blit(lifetext, (P1.rect.x + (P1.surf.get_rect()[2] / 4), P1.rect.y - 35))

            for npc in npcs:
                displaysurface.blit(npc.surf, npc.rect)
                npc.update()

            for item in items:
                displaysurface.blit(item.surf, item.rect)
                item.update()
                 
            for entity in all_sprites: # For all sprites
                displaysurface.blit(entity.surf, entity.rect) # Blit to surface

            pygame.display.update() # Push all changes to screen and update it
            FramePerSec.tick(FPS) # Tick function used on clock object limits refresh to 60 FPS

game_loop()
